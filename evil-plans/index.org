#+TITLE: Evil plans
#+HTML: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
#+STARTUP: lognotedone
#+FILETAGS: :evilplans:
#+HTML: <div class="row"><div class="columns">

<<top>>


#+HTML: <div class="heading-status" width="200" height="200" style="float: right; width: 220px; background: white; padding: 10px" data-type="sunburst"></div>

Curious about anything? Contact me at sacha@sachachua.com .  
Web: http://sachachua.com/evil-plans
Raw files: [[https://github.com/sachac/sachac.github.io/tree/master/evil-plans][evil-plans]]

Additional notes: http://sachachua.com/blog/2014/03/reflecting-goals-time/

* Current goals
  :PROPERTIES:
  :CUSTOM_ID: Current_goals
  :END:

See raw file or end of document for code. 

#+CALL: graph-from-tables[](fillcolumn=20,id="G",outputfile="goals.svg",cmdline="-Kdot -Tsvg -Gdpi=72 -Gsize=8,8 -Grankdir=LR") :results silent :exports none

[[file:goals.svg]]

* Including "Someday" goals
  :PROPERTIES:
  :CUSTOM_ID: Including__Someday__goals
  :END:

See raw file or end of document for code.

#+CALL: graph-from-tables[](fillcolumn=20,include-someday=1,outputfile="someday.svg",cmdline="-Kdot -Tsvg -Gdpi=72 -Gsize=10,10 -Grankdir=LR") :results silent :exports none

[[file:someday.svg]]

* Table
  :PROPERTIES:
  :CUSTOM_ID: Table
  :END:
     #+BEGIN: propview :cols (GOALCATEGORY XP TODO ITEM)  :conds ((> XP 0) (not (string= TODO "DONE"))) :id global :noquote t :skip-empty-rows t 
     | GOALCATEGORY | XP | TODO    | ITEM                                                                                          |
     |--------------+----+---------+-----------------------------------------------------------------------------------------------|
     | Life         | 10 | SOMEDAY | set up distinctly interesting memories for four months straight                               |
     | Life         | 30 | SOMEDAY | get driver's license?                                                                         |
     | Drawing      | 20 | SOMEDAY | draw recognizable people                                                                      |
     | Programming  | 10 | SOMEDAY | contribute to open source documentation                                                       |
     | Writing      | 30 | SOMEDAY | write book about 5-year experiment to capture memories and help other people curious about it |
     | Writing      | 50 | SOMEDAY | write a set of three or four 4-part courses                                                   |
     | Life         | 10 | SOMEDAY | create four major projects in a year                                                          |
     | Writing      | 20 | SOMEDAY | write mini-book on building Emacs habits                                                      |
     | Learning     | 10 | SOMEDAY | create syntopicon/bibliography                                                                |
     |--------------+----+---------+-----------------------------------------------------------------------------------------------|
     |              |    |         |                                                                                               |
     #+END:

* Goals                                                                :goal:
:PROPERTIES:
:LOGGING:  TODO(@)
:CUSTOM_ID: Goals
:END:

** SOMEDAY maintain or improve my health
   :PROPERTIES:
   :CUSTOM_ID: maintain_or_improve_my_health
   :END:
So that I can [[live an awesome life]]
** live an awesome life
   :PROPERTIES:
	 :CUSTOM_ID: live_an_awesome_life
   :END:
*** enrich our experiences
    :PROPERTIES:
    :CUSTOM_ID: enrich_our_experiences
    :END:
So that I can [[live an awesome life]]
**** TODO try two weeks of having prepared activities/provocations for A-
     :PROPERTIES:
     :CUSTOM_ID: try_two_weeks_of_having_prepared_activities_provocations_for_A_
     :END:
So that I can [[enrich our experiences]]
**** SOMEDAY set up distinctly interesting memories for four months straight :Life:
     :PROPERTIES:
     :GoalCategory: Life
     :XP:       10
     :CUSTOM_ID: set_up_distinctly_interesting_memories_for_four_months_straight
     :END:
 So that I can [[enrich our experiences][enrich our experiences]]

**** SOMEDAY get driver's license?                                     :Life:
     :PROPERTIES:
     :GoalCategory: Life
     :XP:       30
     :CUSTOM_ID: get_driver_s_license_
     :END:

 So that I can [[enrich our experiences][enrich our experiences]]
** tickle my brain
   :PROPERTIES:
   :CUSTOM_ID: tickle_my_brain
   :END:
so that I can [[get more value from my time]] and [[share useful stuff]]
*** TODO sew more clothes for A- and me
    :PROPERTIES:
    :CUSTOM_ID: sew_more_clothes_for_A__and_me
    :END:
so that I can [[tickle my brain]]
*** TODO build organizers and other things for the house
    :PROPERTIES:
    :CUSTOM_ID: build_organizers_and_other_things_for_the_house
    :END:
so that I can [[tickle my brain]]
** share useful stuff
   :PROPERTIES:
   :CUSTOM_ID: share_useful_stuff
   :END:
So that I can [[get more value from my time]]
*** improve my drawing skills
    :PROPERTIES:
    :CUSTOM_ID: improve_my_drawing_skills
    :END:
So that I can [[share useful stuff]]
**** TODO illustrate another book for A- or her cousins
     :PROPERTIES:
     :CUSTOM_ID: illustrate_another_book_for_A__or_her_cousins
     :END:
So that I can [[improve my drawing skills]]
**** DONE make it to another year of daily journal drawing
     :PROPERTIES:
     :CUSTOM_ID: Make_it_to_another_year_of_daily_journal_drawing
     :END:
So that I can [[improve my drawing skills][improve my drawing skills]]
**** DONE find or make digital equivalent of index card drawing     :Drawing:
     :PROPERTIES:
     :GoalCategory: Drawing
     :XP:       10
     :CUSTOM_ID: find_or_make_digital_equivalent_of_index_card_drawing
     :END:
So that I can [[improve my drawing skills][improve my drawing skills]]
**** SOMEDAY draw recognizable people                               :Drawing:
     :PROPERTIES:
     :GoalCategory: Drawing
     :XP:       20
     :CUSTOM_ID: draw_recognizable_people
     :END:
So that I can [[improve my drawing skills][improve my drawing skills]]
*** improve my coding skills
    :PROPERTIES:
    :CUSTOM_ID: improve_my_coding_skills
    :END:
So that I can [[tickle my brain]]
**** TODO move my services into Docker or similar containers
     :PROPERTIES:
     :CUSTOM_ID: move_my_services_into_Docker_or_similar_containers
     :END:
So that I can [[improve my coding skills]]
(and make my setup easier to reproduce)
 
**** DONE make test-driven development part of my normal workflow :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       5
     :CUSTOM_ID: make_test_driven_development_part_of_my_normal_workflow
     :END:
So that I can [[improve my coding skills]]
**** DONE get the hang of a CSS framework                       :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       5
     :CUSTOM_ID: get_the_hang_of_a_CSS_framework
     :END:
So that I can [[get the hang of a CSS preprocessor][get the hang of a CSS preprocessor]]
**** DONE get the hang of a CSS preprocessor                    :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       5
     :CUSTOM_ID: get_the_hang_of_a_CSS_preprocessor
     :END:
So that I can [[improve my coding skills]]
**** DONE get the hang of a Javascript preprocessor             :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       5
     :CUSTOM_ID: get_the_hang_of_a_Javascript_preprocessor
     :END:
So that I can [[improve my coding skills]]
**** DONE close an open source issue                            :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       10
     :CUSTOM_ID: close_an_open_source_issue
     :END:
So that I can [[improve my coding skills]]
**** SOMEDAY contribute to open source documentation            :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       10
     :CUSTOM_ID: contribute_to_open_source_documentation
     :END:
So that I can [[improve my coding skills]]
**** DONE contribute automated tests to Emacs packages          :Programming:
     :PROPERTIES:
     :GoalCategory: Programming
     :XP:       10
     :CUSTOM_ID: contribute_automated_tests_to_Emacs_packages
     :END:
So that I can [[improve my coding skills]]
*** SOMEDAY publish resources
    :PROPERTIES:
    :CUSTOM_ID: publish_resources
    :END:
So that I can [[share useful stuff]]
**** SOMEDAY [#C] publish 12 free/PWYC resources                    :project:
     :PROPERTIES:
     :CUSTOM_ID: publish_12_free_PWYC_resources
     :END:
 So that I can [[publish resources][publish resources]]
 - [X] Sketchnoting resources
 - [X] No Excuses Guide to Blogging
 - [X] Sketchnotes 2012
 - [X] Sketchnotes 2013
 - [X] How to learn Emacs Lisp by customizing Emacs: http://sach.ac/baby-steps-emacs-lisp - 2014-05-07
 - [ ] Baby steps guide to managing your tasks with Org: http://sach.ac/baby-steps-org-todo
 - [ ] Intermediate guide to Emacs

**** SOMEDAY write a set of three or four 4-part courses            :Writing:
     :PROPERTIES:
     :GoalCategory: Writing
     :XP:       50
     :CUSTOM_ID: write_a_set_of_three_or_four_4_part_courses
     :END:
 So that I can [[publish resources][publish resources]]

**** SOMEDAY create four major projects in a year                      :Life:
     :PROPERTIES:
     :GoalCategory: Life
     :XP:       10
     :CUSTOM_ID: create_four_major_projects_in_a_year
     :END:

 So that I can [[publish resources][publish resources]]
**** SOMEDAY write mini-book on building Emacs habits               :Writing:
     :PROPERTIES:
     :GoalCategory: Writing
     :XP:       20
     :CUSTOM_ID: write_mini_book_on_building_Emacs_habits
     :END:

 So that I can [[create four major projects in a year]] and [[help the Emacs community grow]]
**** DONE [#A] make Sketchnotes 2014                                :Drawing:
     :PROPERTIES:
     :GoalCategory: Drawing
     :XP:       5
     :CUSTOM_ID: make_Sketchnotes_2014
     :Effort:   4:00
     :QUANTIFIED: Packaging
     :END:
     :LOGBOOK:
     CLOCK: [2015-02-03 Tue 19:13]--[2015-02-03 Tue 19:13] =>  0:00
     :END:
 So that I can [[create four major projects in a year]]

** SOMEDAY make better decisions
   :PROPERTIES:
   :CUSTOM_ID: make_better_decisions
   :END:
so that I can [[live an awesome life]]
*** DONE re-examine spending and carve out more for what matters    :Finance:
:PROPERTIES:
:GoalCategory: Finance
:XP: 10
:CUSTOM_ID: re_examine_spending_and_carve_out_more_for_what_matters
:END:
:LOGBOOK:
- State "TODO"       from "SOMEDAY"    [2015-01-26 Mon 17:44]
:END:

So that I can [[make better decisions]]


** get more value from my time
   :PROPERTIES:
   :CUSTOM_ID: get_more_value_from_my_time
   :END:
so that I can [[live an awesome life]]
*** DONE Practise kaizen on our new routines
    :PROPERTIES:
    :CUSTOM_ID: Practise_kaizen_on_our_new_routines
    :END:
So that I can [[get more value from my time]] and [[enrich our experiences][enrich our experiences]]

Current gaps/opportunities:
- Taking care of A-'s basic needs
- Choosing activities to consistently attend
- Making time to think, draw, and share

*** DONE develop structures for journaling                          :Writing:
:PROPERTIES:
:GoalCategory: Writing
:XP: 10
:CUSTOM_ID: develop_structures_for_journaling
:END:
So that I can [[get more value from my time]]
*** SOMEDAY create syntopicon/bibliography                         :Learning:
:PROPERTIES:
:GoalCategory: Learning
:XP: 10
:CUSTOM_ID: create_syntopicon_bibliography
:END:
:LOGBOOK:
- State "TODO"       from "SOMEDAY"    [2015-01-26 Mon 17:44]
:END:

So that I can [[get more value from my time]]
*** DONE keep a year of journals (short entries)                    :Writing:
:PROPERTIES:
:GoalCategory: Writing
:XP: 10
:CUSTOM_ID: keep_a_year_of_private_journals__short_entries_
:END:

So that I can [[get more value from my time]]
** SOMEDAY delegate more effectively
   :PROPERTIES:
   :CUSTOM_ID: delegate_more_effectively
   :END:
So that I can [[get more value from my time]]
*** SOMEDAY [#c] delegate 2,000 hours or $20,000 of meaningful, useful work :delegation:project:
   :PROPERTIES:
   :Goal:     Delegate
	 :CUSTOM_ID: delegate_2_000_hours_or__20_000_of_meaningful__useful_work
   :END:
So that I can [[delegate more effectively]] and [[build good karma]]

So far:

#+begin_src emacs-lisp
  (let ((dollars 8229.45)
        (hours 486))
    (format "%d dollars - %d%%; %d hours - %d%%"
            dollars (* (/ dollars 20000.0) 100.0)
            hours (* (/ hours 2000.0) 100.0)))
#+end_src

#+RESULTS:
: 8229 dollars - 41%; 486 hours - 24%

The work should:
- move me towards my primary goals
- help assistants improve their skills and justify better rates in the marketplace

Need to compensate for 2,166 hours as of 2014-05-16
*** SOMEDAY add 50 items to my process library 									 :delegation:
    :PROPERTIES:
    :CUSTOM_ID: add_50_items_to_my_process_library
		:LINK:     [[file:~/personal/business.org::*Add 50 items to my process library][Add 50 items to my process library]]
    :END:
So that I can [[delegate more effectively]] and [[share useful stuff]]

[[https://drive.google.com/a/sachachua.com/#folders/0B8LpkeSVIjRYVHZCQzVCYTJ5X3M][Process library]] - for my virtual assistants and for other people who are interested in delegation

;;#+CALL: list-files-with-target(directory="~/Google Drive/Delegation - Sacha Chua/Processes", pattern="How to", target=50) :results value org

#+RESULTS:
#+BEGIN_SRC org
35 items - 70%
1. How to add blogs to Feedly
2. How to add resources to the resources page and sidebar widget
3. How to add tags to Flickr sketches
4. How to animate sketches with Autodesk Sketchbook Pro and Camtasia Studio
5. How to convert a Vimeo or YouTube video to MP3 and save it for offline listening
6. How to create a Frugal FIRE event on Google+
7. How to create a Google+ Event banner
8. How to create a Helpers Help Out event on Google+
9. How to download invoices from InvoiceTrack
10. How to draft Q&A posts based on a transcript
11. How to draft an Emacs Basics blog post
12. How to draw and implement highlighted hand-drawn icons using CSS sprites
13. How to extract the MP3 from YouTube or an MP4
14. How to file a healthcare claim for massage
15. How to identify Q&A from a transcript
16. How to import my theme into your local development environment and get ready for work
17. How to look up additional information for people
18. How to post show notes
19. How to prepare for and host a Google Hangout on Air
20. How to process audio in Audacity
21. How to process scheduling requests
22. How to request books from the library
23. How to research related posts
24. How to set up a public conversation over Google Hangouts On Air
25. How to set up a public conversation
26. How to set up a redirection URL
27. How to summarize blog posts as tweets
28. How to transcribe audio
29. How to update Flickr with blog post URLs
30. How to update QuantifiedSelf.ca blog posts with video embeds
31. How to update a blog post with an MP3
32. How to update a book through CreateSpace
33. How to update the MP3 metadata
34. How to upload an MP3 to archive.org
35. How to write a blog post
#+END_SRC

** help the Emacs community grow
   :PROPERTIES:
   :CUSTOM_ID: help_the_Emacs_community_grow
   :END:
so that I can [[tickle my brain]] and [[share useful stuff]]
*** TODO smoothen Emacs and Org use on my phone
    :PROPERTIES:
    :CUSTOM_ID: smoothen_Emacs_and_Org_use_on_my_phone
    :END:
so that I can [[help the Emacs community grow]]
*** TODO help organize a virtual Emacs conference
    :PROPERTIES:
    :CUSTOM_ID: help_organize_a_virtual_Emacs_conference
    :END:
so that I can [[help the Emacs community grow]]

https://emacsconf.org

*** SOMEDAY get back into Emacs Hangouts
    :PROPERTIES:
    :CUSTOM_ID: get_back_into_Emacs_Hangouts
    :END:
so that I can [[help the Emacs community grow]]

*** DONE make it to 52 issues of Emacs News                           :emacs:
    :PROPERTIES:
    :CUSTOM_ID: Make_it_to_52_issues_of_Emacs_News
    :END:
so that I can [[help the Emacs community grow]]

http://sachachua.com/blog/category/emacs-news/
*** SOMEDAY [#c] Develop emacslife.com into beginner/enthusiast resources for Emacs :emacs:project:
		:PROPERTIES:
		:CUSTOM_ID: Develop_emacslife_com_into_beginner_enthusiast_resources_for_Emacs
		:END:
so that I can [[help the Emacs community grow]]

What do I want to learn from working on EmacsLife?

- Organizing questions logically, and adding links between sections
- Writing based on an outline
- Revising with feedback
- Developing a smooth workflow for exporting my blog posts
  - Update monthly, perhaps?
- Herding cats: Delegating to other geeks
- Eventually: structuring courses, creating resources

Sketching the future:

Because of the time I've invested in working on resources for the
Emacs community, I have the confidence that I can logically structure
my thoughts and write technical learning-oriented books. I have a
community of people happy to proof-read/beta. I have a lot of
experience in creating rich media resources as well.

I have a smooth workflow for identifying topics, outlining them,
organizing the topics, researching information, filling in the gaps
(whether I'm writing things myself or paying other people to do so),
pulling everything together, and publishing and sharing the results.
This may even be self-financing. I create a useful resource of at
least 10,000 words at least every 12 weeks.

This gives me great ways to:
- Learn more about what I'm curious about
- Organize my thoughts and identify gaps
- Communicate clearly, approachably, and engagingly
- Share in scalable ways

*** SOMEDAY [#c] create a 10-week Emacs Basics course :emacs:specific:project:someday:
    :PROPERTIES:
    :CUSTOM_ID: create_a_10_week_Emacs_Basics_course
		:LINK:     [[file:~/personal/business.org::*Emacs Basics][Emacs Basics]]
    :END:
So that I can [[help the Emacs community grow]]

http://sachachua.com/blog/tag/emacs-basics

1. [X] Use the mouse
2. [X] [[http://sachachua.com/blog/?p=27062&shareadraft=baba27062_532732552c1f8][Call commands by name with M-x]]
3. [X] Customize and configure
4. [ ] Learn keyboard shortcuts
5. [ ] Learn Emacs Lisp
6. [ ] Customize keyboard shortcuts
7. [ ] Save time with keyboard macros
8. [ ] Be inspired

*** DONE set up regular Emacs hangouts
    :PROPERTIES:
    :GoalCategory: Connecting
    :XP:       20
    :CUSTOM_ID: set_up_regular_Emacs_hangouts
    :END:
    :LOGBOOK:
    - State "TODO"       from "SOMEDAY"    [2015-01-26 Mon 17:44]
    :END:
so that I can [[help the Emacs community grow]]

Every two weeks? Every month? Need a co-host.

* Old graph
  :PROPERTIES:
  :CUSTOM_ID: Old_graph
  :END:
#+begin_src dot :file goals.png :cmdline -Kdot -Tpng :results silent
  digraph G {
    ratio=expand
    node [shape=box]
    "Explore\nEmacs" -> "Learn tools" -> "Tickle my brain" -> "Write blog posts" -> "Share useful stuff" -> "Build good karma" -> "Learn from others"
    "Automate" -> "Learn tools"
    "Explore AutoHotkey" -> "Automate"
    "Read iMacros capabilities" -> "Automate"
    "Set up Selenium for Java" -> "Automate"
    "Share useful stuff" -> "Make technical topics friendlier" -> "Help the Emacs community be even awesomer" -> "Tickle my brain"
    "Make Emacs beginner resources" -> "Share useful stuff"
    "Read" -> "Tickle my brain"
    "Draw" -> "Share useful stuff"
    "Draw" -> "Think more clearly"
    "Write blog posts" -> "Think more clearly"
    "Delegate" -> "Share opportunities"
    "Delegate" -> "Expand capabilities"
    "Tickle my brain" -> "Expand capabilities"
    "Do consulting" -> "Tickle my brain"
    "Package" -> "Share useful stuff"
    "Respond" -> "Learn from others"
    "Respond" -> "Build good karma"
    "Build good karma" -> "Have a good foundation"
    "Get better at Javascript\n(NodeJS, JQuery)" -> "Learn tools"
    "Get better at\nRuby, Rails" -> "Learn tools"
    "Delegate" -> "Build process library" -> "Share useful stuff"
    "Delegate" -> "Learn from others"
    "Learn from others" -> "Make good decisions" -> "Enjoy life"
    "Think more clearly" -> "Make good decisions" -> "Shift my habits"
    "Understand my life" -> "Think more clearly"
    "Ask, experiment, measure" -> "Make good decisions"
    "Sketchnote presentations" -> "Share useful stuff"
    "Sketchnote presentations" -> "Keep good ideas from disappearing"
  }
#+end_src

#+ATTR_HTML: :width 640
[[http://sachachua.com/sharing/goals.png][file:goals.png]]

* Code
  :PROPERTIES:
  :CUSTOM_ID: Code
  :END:

#+name: list-files-with-target
#+begin_src emacs-lisp :var directory="~/Google Drive/Delegation/Processes" :var pattern="How to" :var target=50 :var strip="\\.gdoc$"
  (let ((count 0)
        (files
         (directory-files directory nil pattern)))
    (format "%d items - %d%%\n%s"
            (length files)
            (/ (* 100.0 (length files)) target)
            (mapconcat
             (lambda (x)
               (setq count (1+ count))
               (format "%d. %s" count (replace-regexp-in-string strip "" x)))
             files
             "\n")))
#+end_src


#+name: graph-from-tables
#+BEGIN_SRC emacs-lisp :var fill-column=20 :var tag="goal" :var id="G"
  (defvar include-someday nil)
  (defun sacha/fill-string (string new-fill-column &optional replace-char)
    "Wrap STRING to NEW-FILL-COLUMN. Change newlines to REPLACE-CHAR."
    (with-temp-buffer
      (insert string)
      (let ((fill-column new-fill-column))
        (fill-region (point-min) (point-max))
        (if replace-char
            (progn
              (goto-char (point-min))
              (while (re-search-forward "\n" nil t)
                (replace-match replace-char t t))))
        (buffer-string))))

  (defun sacha/org-map-goals (tag)
    "Return an alist, based on the TAG tree and \"so that I can\" link structure.
    Structure: ((nodes . ((components) ...)) (edges . ((a . b) ...)))"
    (let (nodes edges)
      ;; Go through the entries
      (org-map-entries
       (lambda ()
         (let ((heading (org-heading-components)))
           (when (or (not (elt heading 2)) (member (elt heading 2) (if include-someday '("TODO" "WAITING" "SOMEDAY") '("TODO"))))
             (save-excursion
               (save-restriction
                 ;; Ignore subtrees in the body
                 (org-narrow-to-subtree)
                 (save-excursion
                   (org-set-property "CUSTOM_ID" (replace-regexp-in-string "[^A-Za-z0-9]" "_" (elt heading 4))))
                 (end-of-line)
                 (narrow-to-region
                  (point-min)
                  (if (re-search-forward
                       (concat "[\r\n]\\(" org-outline-regexp "\\)") nil t)
                      (match-beginning 1)
                    (point-max)))
                 (goto-char (point-min))
                 (when (> (car heading) 1)
                   (setq nodes (cons heading nodes)))
                 (when (re-search-forward "so that I can" nil t)
                   (while (re-search-forward org-bracket-link-regexp (line-end-position) t)
                     (setq edges (cons (cons (elt heading 4) (match-string-no-properties 1)) edges)))))))))
       tag)
      (list (cons 'nodes nodes) (cons 'edges edges))))

  (defvar sacha/elgraphviz-attributes '((:color . "color")
                                        (:fontname . "fontname")
                                        (:pad . "pad")
                                        (:shape . "shape")
                                        (:style . "style")
                                        (:tooltip . "tooltip")
                                        (:target . "target")
                                        (:url . "URL")
                                        (:width . "width"))
    "List of attributes")


  (defun sacha/elgraphviz-process-property-list (prop-list)
    "Convert PROP-LIST to an alphabetically sorted, comma-separated attribute list."
    (mapconcat 'identity
               (delq nil
                     (mapcar (lambda (x)
                               (if (plist-get prop-list (car x))
                                   (format "%s=\"%s\"" (cdr x)
                                           (sacha/elgraphviz-quote-string (plist-get prop-list (car x))))))
                             sacha/elgraphviz-attributes))
               ","))

  (ert-deftest sacha/elgraphviz-process-property-list ()
    (should (string= (sacha/elgraphviz-process-property-list '(:width 1)) "width=\"1\"")))

  (defun sacha/elgraphviz-quote-string (string) "Quote \" in strings." (replace-regexp-in-string "\"" "\\\"" (format "%s" string)))

  (defun sacha/elgraphviz-node (name &rest args)
    "Return the node definition for NAME with ARGS as attributes."
    (if args
        (format "\"%s\" [%s]" (sacha/elgraphviz-quote-string name) (sacha/elgraphviz-process-property-list args))
      (format "\"%s\"" (sacha/elgraphviz-quote-string name))))
  (defun sacha/elgraphviz-directed-edge (a b &rest args)
    "Return the node definition for NAME with ARGS as attributes."
    (format "\"%s\" -> \"%s\" [%s]"
            (sacha/elgraphviz-quote-string a)
            (sacha/elgraphviz-quote-string b)
            (sacha/elgraphviz-process-property-list args)))

  (ert-deftest sacha/elgraphviz-node ()
    (should (string= (sacha/elgraphviz-node "Test" :style "filled" :url "http://example.com" :tooltip "test")
                     "\"Test\" [style=\"filled\",tooltip=\"test\",URL=\"http://example.com\"]")))

  (defun sacha/elgraphviz-default-node (&rest attributes)
    (format "node [%s]" (sacha/elgraphviz-process-property-list attributes)))

  (ert-deftest sacha/elgraphviz-default-node ()
    (should (string= (sacha/elgraphviz-default-node :color "#cccccc" :width 100)
                     "node [color=\"#cccccc\",width=\"100\"]")))

  (defun sacha/elgraphviz-default-edge (&rest attributes)
    (format "edge [%s]" (sacha/elgraphviz-process-property-list attributes)))
  (defun sacha/elgraphviz-attribute (name val)
    (format "%s=\"%s\"" name (sacha/elgraphviz-quote-string val)))

  (defun sacha/elgraphviz-digraph (id &rest body)
    (concat "digraph " id " {\n"
            (mapconcat 'identity body "\n")
            "}"))

  (defun sacha/org-map-to-graphviz (map fill-column id)
    "Convert MAP to a graphviz representation. Wrap titles at FILL-COLUMN."
    (sacha/elgraphviz-digraph id
                              (sacha/elgraphviz-attribute "id" id) 
                              (sacha/elgraphviz-default-node :shape "box" :fontname "Open Sans" :pad 1) 
                              (sacha/elgraphviz-default-edge :color "#CCCCCC") 
                              (mapconcat
                               (lambda (x)
                                 (sacha/elgraphviz-directed-edge 
                                  (sacha/fill-string (car x) fill-column "\\n")
                                  (sacha/fill-string (cdr x) fill-column "\\n")))
                               (cdr (assoc 'edges map)) "\n")
                              (mapconcat
                               (lambda (x)
                                 (sacha/elgraphviz-node
                                  (sacha/fill-string (elt x 4) fill-column "\\n")
                                  :style (if (null (elt x 2)) "filled")
                                  :url (concat "index.html#" (replace-regexp-in-string "[^A-Za-z0-9]" "_" (elt x 4)))
                                  :target "_parent"
                                  :tooltip (elt x 4)))
                               (cdr (assoc 'nodes map)) "\n")))
  (org-babel-execute:dot (sacha/org-map-to-graphviz (sacha/org-map-goals tag) fill-column id) (list (cons :file outputfile) (cons :cmdline cmdline)))
#+END_SRC

#+begin_EXPORT html
<style type="text/css">
.back-to-top {
    position: fixed;
    bottom: 2em;
    right: 0px;
    text-decoration: none;
    color: #000000;
    background-color: rgba(235, 235, 235, 0.80);
    font-size: 12px;
    padding: 1em;
    display: none;
}

.back-to-top:hover {
    background-color: rgba(135, 135, 135, 0.50);
}
</style>

<a class="back-to-top" href="#top">Back to top</a>

<script type="text/javascript">
    var offset = 220;
    var duration = 500;
    $(window).scroll(function() {
        if (jQuery(this).scrollTop() > offset) {
            jQuery('.back-to-top').fadeIn(duration);
        } else {
            jQuery('.back-to-top').fadeOut(duration);
        }
    });
</script>
#+end_EXPORT

#+begin_EXPORT html
</div></div><!-- columns, row-->
#+end_EXPORT

#+BEGIN_EXPORT html
  <style type="text/css">
  .Green { fill: green; color: white; background: green}
  .Yellow { fill: yellow; background: yellow }
  .Red { fill: red; color: white; background: red }
  svg .heading { cursor: pointer; stroke: 2px white; }
  path.heading.TODO { fill: green }
  path.heading.SOMEDAY { fill: yellow }

  </style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
<script type="text/javascript">
// Returns a hierarchical JSON of the tree structure
function buildHeadingTree() {
  var lastNode = {level: 0, children: []};
  var root = lastNode;
  var headings = $(':header');
  for (var i = 0; i < headings.length; i++) {
    var matches = headings[i].tagName.match(/[0-9]+/);
    var level = +(matches[0]);
    while (level <= lastNode.level && lastNode.parent) {
      lastNode = lastNode.parent;
    }
    var newNode = {parent: lastNode,
                   children: [],
                   level: level,
                   element: headings[i]};
    lastNode.children.push(newNode);
    lastNode = newNode;
  }
  return root;
}

function classValue(d) {
  var m = d.element.innerHTML.match(/TODO|SOMEDAY|DONE/i);
  return ((m && m[0]) || 'TODO') + ' heading';
//  return d.element.innerHTML.match(/Green|Yellow|Red/i)[0];
}
function labelValue(d) {
  return '<a href="#' + d.element.id + '">' + d.element.innerHTML + '</a>';
}

// Code from https://bl.ocks.org/mbostock/1005873
// Draws the chart of status
function drawHeadingStatusChart(output, data) {
  var width = output.attr('width'),
      height = output.attr('height'),
      partition = d3.layout.partition()
        .value(function(d) { return 1; }),
      svg = output.append('svg').attr('width', width).attr('height', height),
      breadcrumbs = output.append('div').attr('class', 'heading-breadcrumbs'),
      clickHandler = function(d) { window.location.hash = '#' + d.element.id; },
      showBreadcrumbs = function(d) {
      var links = [labelValue(d)];
      while (d.parent) {
        d = d.parent;
        if (d.element) {
        links.unshift(labelValue(d));
        }
      }
      breadcrumbs.html(links.join(' &lt; '));
  };
  if (output.attr('data-type') == 'sunburst') {
    var radius = Math.min(width, height) / 2;
    svg = svg.append('g').attr('transform', 'translate(' + (width / 2) + ',' + (height / 2) + ')');
    var x = d3.scale.linear().range([0, 2 * Math.PI]),
        y = d3.scale.sqrt().range([0, radius]),
        arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); }),
    path = svg.selectAll('path').data(partition(data))
                  .enter().append('path').attr('d', arc)
                  .attr('class', classValue)
                  .on('click', clickHandler)
                  .on('mouseover', showBreadcrumbs);
  } else {
    var x = d3.scale.linear().range([0, width]),
        y = d3.scale.linear().range([0, height]),
        rect = svg.selectAll('rect');
        rect.data(partition(data))  
          .enter()
          .append('rect')
          .attr('x', function(d) { return x(d.x); })
          .attr('y', function(d) { return y(d.y); })
          .attr('width', function(d) { return x(d.dx); })
          .attr('height', function(d) { return y(d.dy); })
          .attr('class', classValue)
          .on('mouseover', showBreadcrumbs)
          .on('click', clickHandler);
  }
}

function addClassToHeadings() {
  var headings = $(':header');
  for (var i = 0; i < headings.length; i++) {
    $(headings[i]).addClass(classValue({element: headings[i]}));
  }
}

$(document).ready(function() {
  drawHeadingStatusChart(d3.select('.heading-status'),  
   buildHeadingTree().children[0]);
  addClassToHeadings();
});
</script>
#+END_EXPORT
